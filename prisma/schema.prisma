// generator client {
// //   provider = "prisma-client-js"
// // }

// // datasource db {
// //   provider = "postgresql"
// //   url      = env("DATABASE_URL")
// // }

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id               Int             @id @default(autoincrement())
  firstName        String
  lastName         String
  password         String
  email            String          @unique
  dateOfBirth      DateTime
  jobTitle         String?
  profile          Profile[]       @relation("profile")
  posts            Post[]
  role             Role            @default(USER)
  sentRequests     RequestFriend[] @relation("SentRequests")
  receivedRequests RequestFriend[] @relation("ReceivedRequests")
  following        Following[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("users")
}

model RequestFriend {
  id          Int      @id @default(autoincrement())
  status      String // "pending", "accepted", "rejected"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requester   User     @relation(name: "SentRequests", fields: [requesterId], references: [id])
  requesterId Int
  requested   User     @relation(name: "ReceivedRequests", fields: [requestedId], references: [id])
  requestedId Int

  @@map("request_friends")
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

model Profile {
  id           Int      @id @default(autoincrement())
  biograpy     String // Intentional typo!
  profileImage String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       Int      @unique
  user         User     @relation(name: "profile", fields: [userId], references: [id])

  @@map("profile")
}

model Following {
  id          Int      @id @default(autoincrement())
  userId      Int
  followingId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@map("followings")
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String
  published  Boolean    @default(true)
  content    String     @db.VarChar(500)
  authorId   Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User       @relation(fields: [authorId], references: [id])
  categories Category[]

  @@map("posts")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  @@unique([name])
  @@map("categories")
}

model Course {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  // tag Tags[]
  courseLevel String
  assistant   String?
  imagePath   String?
  duration    Int
  certify     Boolean @default(false)
  published   Boolean @default(false)
  favorited   Boolean @default(false)

  //Instructor
  //instructor  Instructor @relation(fields: [instructorId], references: [id])
  instructorId Int

  //Feedback
  //feedback  CourseFeedback @relation(fields: [feedbackId], references: [id])
  feedbackId Int @default(0)

  //Schedule
  //schedule  CourseSchedule @relation(fields: [schedulteId], references: [id])
  schedulteId Int @default(0)

  //CourseExpectation
  //courseExpect CourseExpectation @relation(fields: [courseExpectId], references: [id])
  courseExpectId Int @default(0)

  //CourseRequirement
  //courseRequirement CourseRequirement @relation(fields: [courseReqId], references: [id])
  courseRequireId Int @default(0)

  //CourseSection
  //coursecSection CoursecSection @relation(fields: [coursecSectionId], references: [id])
  coursecSectionId Int @default(0)

  //courseEnrolled  CourseEnroll[]
  createdAt DateTime @default(now())
  createdBy Int      @default(0)
  updatedAt DateTime @updatedAt
  updatedBy Int      @default(0)
}

model CourseDetail {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  tag         Tags[]
  courseLevel String
  assistant   String?
  imagePath   String?
  duration    Int
  certify     Boolean @default(false)
  published   Boolean @default(false)
  favorited   Boolean @default(false)

  //Instructor
  //instructor  InstructorDetail @relation(fields: [instructorId], references: [id])
  instructorId Int

  //Feedback
  //feedback  CourseFeedback @relation(fields: [feedbackId], references: [id])
  feedbackId Int

  //Schedule
  //schedule  CourseSchedule @relation(fields: [schedulteId], references: [id])
  schedulteId Int

  //CourseExpectation
  //courseExpect CourseExpectation @relation(fields: [courseExpectId], references: [id])
  courseExpectId Int

  //CourseRequirement
  //courseRequirement CourseRequirement @relation(fields: [courseReqId], references: [id])
  courseReqId Int

  //CourseSection
  //coursecSection CoursecSection @relation(fields: [coursecSectionId], references: [id])
  coursecSectionId Int

  //courseEnrolled  CourseEnroll[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Tags {
  development
  database
}

// model CourseDetail{
//     course_id String @id @default(uuid())
//     course_content String
//     course_feedback String
//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
// }

// model InstructorDetail{
//     id Int @id @default(autoincrement())
//     first_name String
//     last_name String
//     title  String
//     birth_date  DateTime
//     contact_phone String
//     contact_mobile String
//     contact_email String
//     contact_address String
//     national_id String
//     //course CourseDetail[]
//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
// }

model Instructor {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  title          String
  birthDate      DateTime
  contactPhone   String
  contactEmail   String
  contactAddress String
  nationalID     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CourseFeedback {
  id             Int      @id @default(autoincrement())
  courseId       Int
  feedbackDetail String
  createdBy      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("course_feedbacks")
}

model CourseSchedule {
  id              Int      @id @default(autoincrement())
  courseId        Int
  scheduleBy      Int
  courseStartDate DateTime // @updatedAt 
  courseEndDate   DateTime // @updatedAt
  remark          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CourseExpectation {
  id                Int      @id @default(autoincrement())
  courseId          Int
  expectationDetail String
  createdBy         Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CourseRequirement {
  id                Int      @id @default(autoincrement())
  courseId          Int
  requirementDetail String
  createdBy         Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CoursecSection {
  id            Int      @id @default(autoincrement())
  courseId      Int
  sectionDetail String
  createdBy     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CourseEnroll {
  id               Int      @id @default(autoincrement())
  enrolledCourseId Int
  scheduleId       Int
  enrooledUserId   Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
